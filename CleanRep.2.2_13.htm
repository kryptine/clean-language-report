<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 14 (filtered)">
<title>Clean 2.2 Ref Man</title>
<link rel="stylesheet" href="CleanRep.2.2.css" type="text/css">
</head>

<body lang=NL link=blue vlink=purple>
<div class=WordSection14>

<p class=Heading1Chapter><span style='position:absolute;z-index:251683328;
left:0px;margin-left:38px;margin-top:19px;width:201px;height:98px'><img
width=201 height=98 src="CleanRep.2.2_files/image037.gif"></span><a
name="_Toc311798113"><span lang=EN-US><br>
Chapter 11<br>
Foreign Language Interface</span></a><span lang=EN-US> </span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 width="100%"
 style='width:100.0%;border-collapse:collapse'>
 <tr style='page-break-inside:avoid'>
  <td width="50%" valign=bottom style='width:50.0%;padding:0cm 4.0pt 0cm 4.0pt'>
  <table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 width="100%"
   style='width:100.0%;background:#9999FF;border-collapse:collapse'>
   <tr style='page-break-inside:avoid'>
    <td width="9%" valign=top style='width:9.0%;padding:0cm 0cm 0cm 0cm'>
    <p class=introtable style='margin-left:0cm;text-indent:0cm'><span
    lang=EN-US>11.1</span></p>
    </td>
    <td width="91%" valign=top style='width:91.0%;padding:0cm 0cm 0cm 0cm'>
    <p class=introtable style='margin-left:0cm;text-indent:0cm'><span
    lang=EN-US> <a href="#_Foreign_export">Foreign Export</a></span></p>
    </td>
   </tr>
  </table>
  <p class=introtable></p>
  </td>
  <td width="50%" valign=top style='width:50.0%;padding:0cm 4.0pt 0cm 4.0pt'>
  <table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 width="100%"
   style='width:100.0%;background:#9999FF;border-collapse:collapse'>
   <tr>
    <td width="9%" valign=top style='width:9.0%;padding:0cm 0cm 0cm 0cm'>
    <p class=introtable style='margin-left:0cm;text-indent:0cm'><span
    lang=EN-US>11.2</span></p>
    </td>
    <td width="91%" valign=top style='width:91.0%;padding:0cm 0cm 0cm 0cm'>
    <p class=introtable style='margin-left:0cm;text-indent:0cm'><span
    lang=EN-US> <a href="#_11.2_Using_ABC">Using ABC instructions</a></span></p>
    </td>
   </tr>
  </table>
  <p class=introtable></p>
  </td>
 </tr>
</table>

<p class=lopal style='margin-left:0cm;text-indent:0cm'><sub><span lang=EN-US>&nbsp;</span></sub></p>

<p class=par><span lang=EN-US>The tool htoclean can be used to generate
interfaces to C functions. This is not discussed in this manual.</span></p>

<p class=par><span lang=EN-US>How to call Clean functions from C is discussed
in <a href="#_11.1_Foreign_Export">section 11.1</a>.</span></p>

<p class=par><span lang=EN-US>ABC instructions of the virtual machine for Clean
can be used. This is explained in <a href="#_11.2_Using_ABC">section 11.2</a>.</span></p>

<h2><a name="_Toc311798114"></a><a name="_Foreign_export"></a><a
name="_11.1_Foreign_Export"></a><span lang=EN-US>11.1  Foreign Export</span></h2>

<p class=par><span lang=EN-US>Some Clean functions can be called from C using
foreign export. This is possible if:</span></p>

<p class=lopal><span lang=EN-US>•&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;The function is exported.</span></p>

<p class=lopal><span lang=EN-US>•&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;All arguments are annotated as being
strict (<a href="CleanRep.2.2_5.htm#_3.7.5_Functions_with">see 3.7.5</a>).</span></p>

<p class=lopal><span lang=EN-US>•&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;The arguments and result type is
either of the following:</span></p>

<p class=lopal style='margin-left:39.3pt;text-indent:-18.0pt'><span lang=EN-US>•<span
style='font:7.0pt "Times New Roman"'>&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;
</span></span><span lang=EN-US>Int</span></p>

<p class=lopal style='margin-left:39.3pt;text-indent:-18.0pt'><span lang=EN-US>•<span
style='font:7.0pt "Times New Roman"'>&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;
</span></span><span lang=EN-US>Real</span></p>

<p class=lopal style='margin-left:39.3pt;text-indent:-18.0pt'><span lang=EN-US>•<span
style='font:7.0pt "Times New Roman"'>&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;
</span></span><span lang=EN-US>{#Char}</span></p>

<p class=lopal style='margin-left:39.3pt;text-indent:-18.0pt'><span lang=EN-US>•<span
style='font:7.0pt "Times New Roman"'>&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;
</span></span><span lang=EN-US>{#Int}</span></p>

<p class=lopal style='margin-left:39.3pt;text-indent:-18.0pt'><span lang=EN-US>•<span
style='font:7.0pt "Times New Roman"'>&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;
</span></span><span lang=EN-US>{#Real}</span></p>

<p class=lopal style='margin-left:39.3pt;text-indent:-18.0pt'><span lang=EN-US>•<span
style='font:7.0pt "Times New Roman"'>&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;
</span></span><span lang=EN-US>A tuple of these strictly annotated types
(including tuples),        </span></p>

<p class=par><span lang=EN-US>The following syntax is used in an implementation
module to export a function to a foreign language:</span></p>

<p class=exb><span lang=EN-US>&nbsp;</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 width="100%"
 style='width:100.0%;border-collapse:collapse'>
 <tr>
  <td width="22%" valign=top style='width:22.68%;background:#FFCC99;padding:
  0cm 5.4pt 0cm 5.4pt'>
  <p class=exb><span class=clean><span lang=EN-US>ForeignExportDef</span></span><span
  lang=EN-US> </span></p>
  </td>
  <td width="3%" valign=top style='width:3.56%;background:#FFCC99;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=syntaxb style='background:transparent'><span lang=EN-US>=</span></p>
  </td>
  <td width="73%" valign=top style='width:73.74%;background:#FFCC99;padding:
  0cm 5.4pt 0cm 5.4pt'>
  <p class=exb><span class=cleankw><span lang=EN-US>foreign export </span></span><span class=clean><span lang=EN-US>[</span></span><span class=cleankw><span
  lang=EN-US> ccall</span></span><span class=clean><span lang=EN-US> | </span></span><span
  class=cleankw><span lang=EN-US>stdcall </span></span><span class=clean><span
  lang=EN-US>] FunctionName ;</span></span></p>
  </td>
 </tr>
</table>

<p class=par><span lang=EN-US>The calling convention may be specified by
prefixing the function name with ccall  or stdcall. The default is ccall,</span></p>

<p class=par><span lang=EN-US>To pass an argument from C of type:</span></p>

<p class=lopal><span lang=EN-US>•&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005; Int, use a C integer type that has
the same size as an Int in Clean. On 32 bit platforms this is 4 bytes, on 64
bit platforms 8 bytes. Usually long has the right size, except on 64 bit
Windows __int64 can be used instead.</span></p>

<p class=lopal><span lang=EN-US>•&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;Real, use type double.</span></p>

<p class=lopal><span lang=EN-US>•&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;{#Char}, pass the address of the
string. The first 4 (on 32 bit platforms) or 8 (on 64 bit platforms) bytes
should contain the number of characters. The characters of the string are
stored in the following bytes. The string is copied to the heap of Clean, and
this copy is used in Clean.</span></p>

<p class=lopal><span lang=EN-US>•&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;{#Int}, pass the address of the array.
The elements of the array have the same size as an Int in Clean. The number of
elements should be stored in 4 bytes at offset -8 (32 bit) or 8 bytes at offset
–16 (64 bit). The array is copied to the heap of Clean, and this copy is used
in Clean.</span></p>

<p class=lopal><span lang=EN-US>•&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;{#Real}, pass the address of the
array. The elements of the array have the same size as a Real in Clean (8
bytes) and a double in C. The number of elements should be stored in the same
way as for {#Int}. The array is copied to the heap of Clean, and this copy is
used in Clean.</span></p>

<p class=lopal><span lang=EN-US>•&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;&#x2005;tuple. The elements are passed as
separate arguments as described above, in the same order as in the tuple.</span></p>

<p class=par><span lang=EN-US>Preferably, the macros in the file Clean.h (part
of the tool htoclean) should be used to access strings and arrays,</span></p>

<p class=par><span lang=EN-US>If result of the function is not a tuple, the
result is passed in the same way as an argument, except that strings and arrays
are not copied. The address of the string or array in the heap of Clean is
passed to C. This string or array may only be used until the next call or
return to Clean, because the Clean runtime system may deallocate or move the
array.</span></p>

<p class=par><span lang=EN-US>If multiple values are yielded, because the
result is a tuple, the result type in C is void. To return the values, for each
value an additional argument with the address where the result should be stored
is added (at the end, in the same order as in the tuple).  For example, if the
result has type (Real, Int), an additional double * and long * (__int64 * for
64 bit Windows) is added. </span></p>

<h2><a name="_Toc311798115"></a><a name="_11.2_Using_ABC"></a><span lang=EN-US>11.2  Using
ABC instructions</span></h2>

<p class=par><span lang=EN-US>Function can be implemented using ABC
instructions from the virtual machine used by Clean:</span></p>

<p class=exb><span lang=EN-US>&nbsp;</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 width="100%"
 style='width:100.0%;border-collapse:collapse'>
 <tr>
  <td width="22%" valign=top style='width:22.68%;background:#FFCC99;padding:
  0cm 5.4pt 0cm 5.4pt'>
  <p class=exb><span lang=EN-US>ABCCodeFunctionDef </span></p>
  </td>
  <td width="3%" valign=top style='width:3.56%;background:#FFCC99;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=syntaxb style='background:transparent'><span lang=EN-US>=</span></p>
  </td>
  <td width="73%" valign=top style='width:73.74%;background:#FFCC99;padding:
  0cm 5.4pt 0cm 5.4pt'>
  <p class=exb><span lang=EN-US>Function {Pattern} </span><span class=cleanb><span
  lang=EN-US>= </span></span><span class=cleankw><span lang=EN-US>code</span></span><span
  lang=EN-US> [</span><span class=cleankw><span lang=EN-US>inline</span></span><span
  lang=EN-US>] </span><span class=cleankw><span lang=EN-US style='color:#3366FF'>{</span></span><span
  lang=EN-US> ABCInstructions </span><span class=cleankw><span lang=EN-US
  style='color:#3366FF'>}</span></span></p>
  </td>
 </tr>
</table>

<p class=par><span lang=EN-US>By adding</span><span class=cleankw><span
lang=EN-US> inline</span></span><span lang=EN-US> the ABC instructions will be
inlined if the function is called in a strict context.</span></p>

<p class=par><span lang=EN-US>This is used to define primitive functions of the
StdEnv, for example integer addition. htoclean generates calls to C functions
using the ABC instruction ccall.</span></p>

<p class=par><span lang=EN-US>  </span></p>

</div>

</body>
</html>
